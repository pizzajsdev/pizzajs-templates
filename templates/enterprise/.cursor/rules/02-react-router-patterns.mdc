---
globs: app/routes/*.tsx,app/routes/**/*.tsx
---

# React Router 7+ Route Patterns

## Route File Structure
Routes follow file-based routing similar to Next.js App Router.

## Route Types
- **NEVER** manually create files in `./+types/*` directories
- These are auto-generated by React Router when running
- Don't try to fix type errors in these files - they resolve automatically

## Route Component Pattern
```tsx
import type { Route } from './+types/index'  // or appropriate file name

export function meta({}: Route.MetaArgs) {
  return [
    { title: 'Page Title' },
    { name: 'description', content: 'Page description' }
  ]
}

export function loader({ request }: Route.LoaderArgs) {
  // Server-side data loading
}

export function clientLoader({ request }: Route.ClientLoaderArgs) {
  // Client-side data loading
}

export function action({ request }: Route.ActionArgs) {
  // Form submissions and mutations
}

export default function ComponentName() {
  // Component implementation
}
```

## Key Rules
1. Import types from `'./+types/[filename]'` where filename matches the route file
2. Use `Route.LoaderArgs`, `Route.ActionArgs`, `Route.MetaArgs` for function arguments
3. Always use named exports for route functions (meta, loader, action)
4. Use default export for the main component
5. Component types come from the Route type automatically

## Import Patterns
```tsx
import { Link, useLoaderData, useActionData, Form } from 'react-router'
```

## Example Files
- [app/routes/index.tsx](mdc:app/routes/index.tsx) - Homepage example
- [app/routes/dashboard.tsx](mdc:app/routes/dashboard.tsx) - Protected route example
- [app/routes/login.tsx](mdc:app/routes/login.tsx) - Auth route example